1) 将代码传递给方法的功能（同时也能够返回代码并将其包含在数据结构中），通常称之为函数式编程。
2) Collection主要时为了存储和访问数据，而Stream则主要用于描述对数据的计算。
3) 谓词(Predicate)：即一个返回boolean值的函数。
4) 行为参数化：让方法接受多种行为(或者战略)作为参数，并在内部使用，来完成不同的行为。就是一个方法接受多个不同的行为作为参数，并在内部使用它们，完成不同行为的能力。
5) 可以把Lambda表达式理解为简洁地表示可传递的匿名函数的一种方式：它没有名称，但有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表。
6) 匿名：没有明确的名称；函数：不属于特定的类，有参数列表、函数主体、返回类型以及可能的抛出的异常列表；传递：Lambda表达式可以作为参数传递给方法或者存储在变量中；简洁：无需像匿名类那样写很多模板代码。
7) Lambda没有return语句，因为已经隐含了return。表达式部分可以包含多行语句，需要使用大括号。
8) 箭头->把参数列表与Lambda主体分开。Lambda的基本语法是(parameters)->expression或者(parameters)->{statements;}.
9) 可以在函数式接口上使用Lambda表达式。函数式接口就是只定义一个抽象方法的接口。Lambda表达式直接以内联的形式为函数式接口的抽象方法提供实现，并把整个表达式作为函数式接口的实例。
10) 函数式接口的抽象方法的签名基本上就是Lambda表达式的签名，这种抽象方法叫做函数描述符。
11) @FunctionalInterface注解表示该接口会设计成一个函数式接口。
12) 任何函数式接口都不允许抛出受检异常(checked exception)。
13) a、Predicate<T>接口定义了一个名叫test的抽象方法，它接受泛型T对象，并返回一个boolean。
    b、Consumer<T>接口定义了一个名叫accept的抽象方法，它接受泛型T对象，并返回一个void。
    c、Function<T>接口定义了一个名叫apply的抽象方法，它接受泛型T对象，并返回一个泛型R对象。
14) Lambda的类型是从使用Lambda的上下文推断出来的。上下文中Lambda表达式需要的类型称为目标类型。
15) Java7中引入了菱形运算符<>，利用泛型推断从上下文推断类型的思想。比如：List<String> listOfStrings = new ArrayList<>(); List<Integer> listOfIntegers = new ArrayList<>();
16) 如果一个Lambda的主体是一个语句表达式，它就和一个返回void的函数描述符兼容（当然需要参数列表也兼容）。
17) Lambda可以没有限制地捕获(也就是在其主体中引用)实例变量和静态变量，但局部变量必须显示声明为final，或者事实上是final。
18) 实例变量都存储在堆中，而局部变量则保存在栈上。如果Lambda可以直接访问局部变量，而且Lambda是在一个线程中使用，则使用Lambda的线程，可能会在分配该变量的线程将这个变量收回之后，去访问该变量。因此，Java在访问自由局部变量时，实际上是在访问它的副本，而不是访问原始变量。
19) 方法引用主要有三类：
    1、指向静态方法的方法引用(例如Integer的parseInt方法，写作Integer::parseInt)
    2、指向任意类型实例方法的方法引用（例如String的length方法，写作String::length）
    3、指向现有对象的实例方法的方法引用（假设有个局部变量expensiveTransaction用于存放Transaction类型的对象，它支持实例方法getValue，那么就可以写成expensiveTransaction::getValue）
20) 对于一个现有的构造函数，可以利用它的名字和关键字new来创建它的一个引用，比如ClassName::new。它的功能与指向静态方法的引用类似。
21) 谓词复合：谓词接口包括三个方法：negate、and和or。and和or方法是按照在表达式链中的位置，从左向右确定优先级的。因此，a.or(b).and(c)可以看作(a||b)&&c.
22) 可以把Function接口所代表的Lambda表达式复合起来。andThen和compose方法。andThen方法会返回一个函数，它先对输入应用一个给定函数，再对输出应用另一个函数（从左至右运行方法，调用方法先运行，被调用方法后运行）。compose方法先把给定的函数用作compose的参数里面给定的那个函数，然后再把函数本身用于结果（从右至左运行方法，被调用方法先运行，调用方法后运行）。
23) 流:允许以声明性方式处理数据集合。通过查询语句来表达，而不是临时写一个实现。流还可以透明地并行处理。
24) Stream API特点：声明性-更简洁、更易读，可复合-更灵活，可并行-性能更好。集合支持一个新的stream方法，它可以返回一个流（接口定义在java.util.stream.Stream里），流简短的定义：从支持数据处理操作的源生成的元素序列。
  1、元素序列：流提供了一个接口，可以访问特定元素类型的一组有序值。流的目的在于表达计算。集合讲的是数据，流讲的是计算。
  2、源：流会使用一个提供数据的源，从有序集合生成流时会保留原有的顺序。
  3、数据操作处理：流的数据处理功能支持类似于数据库的操作，流操作可以顺序执行，也可以并行执行。
  4、流水线：很多流操作本身会返回一个流，这样多个操作就可以连接起来，形成一个大的流水线。
  5、内部迭代：流的迭代操作在后台进行。
25) 
